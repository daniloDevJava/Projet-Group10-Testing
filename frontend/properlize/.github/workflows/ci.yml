# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: Propelize Frontend CI

# Déclencheurs du workflow
on:
  # Exécuter sur les push vers la branche 'main'
  push:
    branches: [ "imelda","main" ]
  # Exécuter sur les Pull Requests ciblant la branche 'main'
  pull_request:
    branches: [ "main" ]

# Liste des jobs à exécuter
jobs:
  # Un seul job nommé 'build-and-test'
  build-and-test:
    # Le type de machine sur laquelle exécuter le job
    runs-on: ubuntu-latest

    # Séquence d'étapes
    steps:
      # Étape 1: Récupérer le code de ton dépôt
      - name: Checkout repository
        uses: actions/checkout@v4

      # Étape 2: Configurer Node.js
      # Utilise une version LTS (Long Term Support) de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # Optionnel mais recommandé : Mettre en cache les dépendances
          cache: 'yarn' # ou 'npm' si tu utilises npm

      # Étape 3: Installer les dépendances du projet
      # 'ci' est souvent plus rapide et plus strict que 'install'
      - name: Install dependencies
        run: yarn install --frozen-lockfile # ou npm ci

      # Étape 4: Installer les navigateurs pour Playwright (comme demandé dans le TP)
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      # Étape 5: Exécuter les tests Playwright
      # Le webServer configuré dans playwright.config.js sera démarré automatiquement
      - name: Run Playwright tests
        run: npx playwright test

      # Étape optionnelle mais très utile :
      # Uploader le rapport de test HTML pour pouvoir le consulter après l'exécution
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        # Ne s'exécute que si les étapes précédentes ont échoué, pour le débogage
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30